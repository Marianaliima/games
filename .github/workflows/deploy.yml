name: deploy games 

on: 
  push: 
    branches: [main]

jobs:
  build: 
    runs-on: [ubuntu-latest]
    steps: 
      - name: Checkout source 
        uses: actions/checkout@v4
      - name: Login no docker
        run: echo ${{secrets.DOCKER_PASS}} | docker login -u ${{secrets.DOCKER_USER}} --password-stdin
      - name: Build docker image 
        run: docker build -t marilima13/games-deploy .
      - name: Publicar a imagem da aplicação no docker hub 
        run: docker push marilima13/games-deploy:latest

  deploy: 
    needs: build
    runs-on: [aws-ec2]
    steps: 
    - name: Criar network
      run: |
          if ! docker network ls | grep -q my-net; then
            docker network create my-net
          fi
    - name: Pull da imagem do postgres:16
      run: docker pull postgres:16
    - name: Criar/rodar o container do banco de dados      
      run: |
          if docker container inspect database-container &> /dev/null; then
            echo "O container já existe."
          else
            echo "O container não existe."   
            docker run -d --name database-container --network my-net -p 5432:5432 -e POSTGRES_DB=gamesdatabase -e POSTGRES_PASSWORD=12345678 -e POSTGRES_USER=postgres postgres:16
          fi
    - name: Pull da imagem da aplicação no dockerhub
      run: docker pull marilima13/games-deploy:latest
    - name: Deletar container do app existente
      run: docker rm -f app-container   
    - name: Criar/rodar o container da aplicação
      run: docker run -d -p 3000:3000 --name app-container --network my-net -e DB_URL="postgresql://postgres:postgres@database-container:5432/gamesdatabase?schema=public" marilima13/games-deploy:latest sh -c "npm run migration:run && npm run start"
    

      